package com.novel.page.search

import android.annotation.SuppressLint
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.input.nestedscroll.nestedScroll
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.lerp
import androidx.compose.ui.util.lerp
import androidx.hilt.navigation.compose.hiltViewModel
import com.novel.page.component.NovelText
import com.novel.page.component.RankingNumber
import com.novel.page.search.component.SearchRankingItem
import com.novel.page.search.viewmodel.SearchViewModel
import com.novel.ui.theme.NovelColors
import com.novel.utils.debounceClickable
import com.novel.utils.ssp
import com.novel.utils.wdp
import java.text.SimpleDateFormat
import java.util.*

/**
 * ÂÆåÊï¥Ê¶úÂçïÈ°µÈù¢
 */
@SuppressLint("UnrememberedMutableState")
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun FullRankingPage(
    rankingType: String,
    rankingItems: List<SearchRankingItem>,
    onNavigateBack: () -> Unit,
    onNavigateToBookDetail: (Long) -> Unit
) {
    // È°∂ÈÉ®Ê†èÁä∂ÊÄÅÂíåÊªöÂä®Ë°å‰∏∫ - ‰øÆÂ§çÊªöÂä®ÈóÆÈ¢ò
    val toolbarState = rememberTopAppBarState()
    val scrollBehavior = TopAppBarDefaults.pinnedScrollBehavior(toolbarState)
    
    // ËÆ°ÁÆóÊäòÂè†ËøõÂ∫¶
    val progress by derivedStateOf {
        if (toolbarState.heightOffsetLimit == 0f) 0f
        else (-toolbarState.heightOffset / toolbarState.heightOffsetLimit).coerceIn(0f, 1f)
    }
    
    // ÂΩìÂâçÊó•Êúü
    val currentDate = remember {
        SimpleDateFormat("yyyyÂπ¥MÊúàdÊó•", Locale.getDefault()).format(Date())
    }
    
    Scaffold(
        modifier = Modifier.nestedScroll(scrollBehavior.nestedScrollConnection),
        topBar = {
            // Ëá™ÂÆö‰πâÈ°∂ÈÉ®Ê†è - ÁÆÄÂåñÂ∏ÉÂ±ÄÔºå‰ΩøÁî®Âõ∫ÂÆöÈ´òÂ∫¶
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(120.dp)
                    .background(
                        Brush.verticalGradient(
                            colors = listOf(
                                Color(0xFFFDF8F6), 
                                Color.White
                            )
                        )
                    )
            ) {
                // ËøîÂõûÊåâÈíÆ
                IconButton(
                    onClick = onNavigateBack,
                    modifier = Modifier
                        .align(Alignment.TopStart)
                        .padding(start = 8.dp, top = 8.dp)
                        .size(40.dp)
                ) {
                    Icon(
                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                        contentDescription = "ËøîÂõû",
                        tint = NovelColors.NovelText
                    )
                }
                
                // Ê†áÈ¢òÂÆπÂô® - ÁÆÄÂåñÂ∏ÉÂ±Ä
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    modifier = Modifier.align(Alignment.Center)
                ) {
                    // ‰∏ªÊ†áÈ¢ò
                    NovelText(
                        text = rankingType,
                        fontSize = 20.ssp,
                        fontWeight = FontWeight.Bold,
                        color = NovelColors.NovelText
                    )
                    
                    Spacer(modifier = Modifier.height(8.wdp))
                    
                    // ÂâØÊ†áÈ¢ò
                    NovelText(
                        text = "Ê†πÊçÆÁúüÂÆûÊêúÁ¥¢Êõ¥Êñ∞",
                        fontSize = 12.ssp,
                        color = NovelColors.NovelTextGray
                    )
                }
            }
        }
    ) { innerPadding ->
        // Ê¶úÂçïÂÜÖÂÆπ
        if (rankingItems.isEmpty()) {
            // Á©∫Áä∂ÊÄÅ
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding),
                contentAlignment = Alignment.Center
            ) {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    NovelText(
                        text = "üìã",
                        fontSize = 48.ssp,
                        color = NovelColors.NovelTextGray
                    )
                    Spacer(modifier = Modifier.height(16.wdp))
                    NovelText(
                        text = "ÊöÇÊó†Ê¶úÂçïÊï∞ÊçÆ",
                        fontSize = 16.ssp,
                        color = NovelColors.NovelTextGray
                    )
                }
            }
        } else {
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .background(Color.White),
                contentPadding = innerPadding,
                verticalArrangement = Arrangement.spacedBy(2.wdp)
            ) {
                items(
                    items = rankingItems,
                    key = { it.id }
                ) { item ->
                    FullRankingItem(
                        item = item,
                        onClick = { onNavigateToBookDetail(item.id) }
                    )
                }
                
                // Â∫ïÈÉ®Á©∫Èó¥
                item {
                    Spacer(modifier = Modifier.height(16.wdp))
                }
            }
        }
    }
}

/**
 * ÂÆåÊï¥Ê¶úÂçïÈ°π
 */
@Composable
private fun FullRankingItem(
    item: SearchRankingItem,
    onClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    Row(
        modifier = modifier
            .fillMaxWidth()
            .debounceClickable(onClick = onClick)
            .padding(horizontal = 16.wdp, vertical = 12.wdp),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.spacedBy(12.wdp)
    ) {
        // ÊéíÂêçÂ∫èÂè∑
        RankingNumber(
            rank = item.rank
        )
        
        // ‰π¶Á±ç‰ø°ÊÅØ
        Column(
            modifier = Modifier.weight(1f)
        ) {
            // ‰π¶Âêç
            NovelText(
                text = item.title,
                fontSize = 15.ssp,
                fontWeight = FontWeight.Medium,
                color = NovelColors.NovelText,
                maxLines = 1
            )
            
            Spacer(modifier = Modifier.height(2.wdp))
            
            // ‰ΩúËÄÖ
            NovelText(
                text = item.author,
                fontSize = 13.ssp,
                color = NovelColors.NovelTextGray,
                maxLines = 1
            )
        }
        
        // ÁÉ≠ÊêúÊï∞Â≠óÔºàÊ®°ÊãüÊï∞ÊçÆÔºâ
        NovelText(
            text = "${(item.rank * 1000 + kotlin.random.Random.nextInt(500))}ÁÉ≠Êêú",
            fontSize = 12.ssp,
            color = NovelColors.NovelTextGray.copy(alpha = 0.7f)
        )
    }
} 